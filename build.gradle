plugins {
	id "com.jfrog.bintray" version "1.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceSets 
{
  main 
  {
    java 
    {
      srcDir 'java/src'
    }
    resources 
    { 
      srcDir 'java/src'
    }
  }
  test
  {
    java 
    {
      srcDir 'java/src'
    }
    resources 
    { 
      srcDir 'java/src'
    }
  }
}


sourceCompatibility = 1.8
group = 'royer'
version = '1.0'

test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "4G"
}

dependencies 
{
    compile group: 'commons-collections', name: 'commons-collections', version: '3.+'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.+'
    compile group: 'commons-io', name: 'commons-io', version: '2.+'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.+'
    compile 'com.nativelibs4java:bridj:0.7.0'

    compile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

repositories 
{
    mavenCentral()
    maven 
    {
        url "http://oss.sonatype.org/content/groups/public"
    } 
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

artifacts 
{
    archives sourcesJar
    archives javadocJar
}

uploadArchives 
{
    repositories 
    {
        mavenDeployer 
        {
            repository(url: "file:../../Repos/RTlibMavenRepo")
        }
    }
}


/*
task jnaerate(type: JavaExec) {
  if (System.properties['os.name'].toLowerCase().contains('windows')) 
  {
    classpath = files("./tools/jnaerator.jar")
    //classpath += sourceSets.main.runtimeClasspath
    main = 'com.ochafik.lang.jnaerator.JNAerator'
    args = ['config.win.jnaerator'] as List
  } 
  else 
  {
    classpath = files("./tools/jnaerator.jar")
    //classpath += sourceSets.main.runtimeClasspath
    main = 'com.ochafik.lang.jnaerator.JNAerator'
    args = ['config.nix.jnaerator'] as List
  }
}

build.dependsOn jnaerate
/**/
